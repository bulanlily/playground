#--------------------------------------------------
# Logging configuration file (overrides the values found in <JREroot>/lib/logging.properties).
# THE VERSION BELOW IS MEANT TO DOCUMENT ALL THE PROPERTIES THAT CAN APPEAR IN THIS FILE,
# AND THUS IS MORE VERBOSE THAN A TYPICAL APPLICATION REQUIRES.
#
# Specify a System property whose key equals "java.util.logging.config.file"
# and whose value equals the path to this file in order to use this file in your program.  
# For example, on the command line, use java -Djava.util.logging.config.file=<pathToThisFile> ...
#
# Every property name which has a "-NS" suffix is a NONSTANDARD property.
# These properties are NOT currently supported by the JDK logging classes.
# Instead, they are additional properties that custom code needs to interpret.
# The bb.util.logging.LogUtil class is one example of code which uses these values;
# see its javadocs for details.
#
# Other projects of mine have much shorter examples of this file, without most of the comments.
# For a file that uses only standard JDK logging properties, see
#	...projectsMine/animationApplet/script/logging.properties
# For a file that uses (almost exclusively) nonstandard (-NS) logging properties, see
#	...projectsMine/backup/script/logging.properties
#
# Concerning what log Level to use in your code or specify below, consider this advice:
#	With seven default levels to chose from, it can be confusing which to choose.
#	Sun advises to use SEVERE, WARNING, and INFO (the levels output by default) for "human-visible issues."
#	These would be things non-developers would care about.
#	They say to use FINE, FINER, and FINEST for "routine" failures and errors,
#	soft errors, performance issues, and developer-focused output.
#	What's a "routine" error?
#	Imagine a cache file not being found.
#	http://www.oracle.com/technology/pub/articles/hunter_logging.html
#--------------------------------------------------


#--------------------------------------------------
# General properties.
# See the LogManager and LogUtil javadocs for more discussion.
#--------------------------------------------------


#-----specify an arbitrary list of classes that will execute during logging startup:
#config = SomeClass1, SomeClass2, SomeClass3, ...


#-----specify the log directory:
logDirectory-NS = ../log


#--------------------------------------------------
# Logger properties.
# Each subsection below describes a part of the Logger name hierarchy.
# See the LogManager and LogUtil javadocs for the complete list and description of all configuration options that may appear here.
#--------------------------------------------------


#--------------------
# Root Logger properties (i.e. for the Logger named "").
# Since every Logger ultimately inherits from the root Logger, this sets global default behavior.
# Furthermore, since by default Loggers also publish to their parent's Handlers recursively up the tree,
# this root Logger's Handlers will ultimately receive all logging requests as well
# (unless some Logger is configured with useParentHandlers = false).
# Note: because of how LogManager auto-initializes this Logger, is best if only use standard JDK logging properties here.
#--------------------


.handlers = bb.util.logging.HandlerConsole
#.handlers = bb.util.logging.HandlerAudio, bb.util.logging.HandlerConsole, bb.util.logging.HandlerEmail, bb.util.logging.HandlerGui
.level = INFO


#--------------------
# "default" Logger properties (i.e. for any Logger whose name starts with "default", such the LogUtil.logger2 field).
#--------------------


#default.handlers-NS = java.util.logging.FileHandler
#----------NOTE: use the "-NS" suffix so that LogUtil will initialize the log file path to a convenient value (i.e. in the log directory, with "default" plus a timestamp in its name)

default.level-NS = ALL
#----------NOTE: using the "-NS" suffix here means that LogUtil will do prefix matching (i.e. any Logger2 whose name starts with "default" will have this applied to it); this is not strictly necessary here, but we doit for illustration purposes


#--------------------
# com.xyz (and child) Logger properties.
#
# This section shows how child Loggers can add to or override their ancestor Logger's behavior.
# Only JDK standard logging properties are used in this section.
# Furthermore, in order to be affected, a Logger must be under the control of LogManager
# (e.g. anonymous Loggers are exempt).
# Recall: LogManager uses a dot separated namespace hierarchy to define parent & child Loggers.
#--------------------


#-----set all com.xyz (and child) Loggers to only log WARNING messages (unless overriden below):
com.xyz.level = WARNING
#----------NOTE: the line above only applies to child Loggers which have no specification for their level; at runtime, for every log call, they will search up their parent tree till they find a Logger which defines level


#-----set all com.xyz.foo (and child) Loggers to ADDITIONALLY log to THE SAME file ALL messages:
com.xyz.foo.handlers = java.util.logging.FileHandler
com.xyz.foo.level = ALL
#----------NOTES:
#---------------1) the FileHandler is created just for the com.xyz.foo Logger.
#---------------A child Logger like com.xyz.foo.sub does not gets its own FileHandler (unless additional configuration is done)
#---------------and it will only use com.xyz.foo's FileHandler if its useParentHandlers property is true.
#---------------2) the level setting overrides the setting from com.xyz that would otherwise be looked up by the com.xyz.foo Logger at runtime for each log call.
#---------------3) the level setting will be what any child Loggers of com.xyz.foo will lookup at runtime (unless additional configuration for them is done).
#---------------4) the level setting is just for the Logger, and does not override the Handler levels
#---------------(e.g. the HandlerConsole on the root Logger, which is INFO as specified below).


#-----set all com.xyz.bar (and child) Loggers to log to a socket only SEVERE messages:
com.xyz.bar.handlers = java.util.logging.SocketHandler
com.xyz.bar.level = SEVERE
com.xyz.bar.useParentHandlers = false
#----------NOTES:
#---------------1) *.useParentHandlers only works if the corresponding *.handlers property is set
#---------------2) Loggers do NOT inherit useParentHandlers from the last ancestor Logger which sets it.
#---------------Instead, useParentHandlers is true by default for every Logger unless explicitly set to false.


#--------------------
# alt* Logger properties.
#
# This section shows how child Loggers can add to or override their ancestor Logger's behavior.
# Only non-standard logging properties are used in this section.
# Furthermore, in order to be affected, a Logger must be created by custom code like LogUtil.makeLogger2.
# Recall: a Logger matches a -NS pattern if that pattern is a prefix of Logger's name
# (i.e. pattern implicitly ends with a * wildcard).
#--------------------


#-----set every Logger whose name starts with alt to log ALL messages:
alt.level-NS = ALL


#-----set every Logger whose name starts with alt to log to its own (PER LOGGER) file (unless overriden, like the alt.123 Logger is below):
alt.handlers-NS = java.util.logging.FileHandler


#-----set every Logger whose name starts with alt.123 to log ONLY to memory until triggered
alt.123.handlers-NS = java.util.logging.MemoryHandler
alt.123.useParentHandlers-NS = false


#--------------------
# + Logger properties.
#
# This section shows how to universally set properties for all Loggers created by the bb.util.logging.LogUtil class.
# (Note that this never includes the root "" Logger.)
# Only non-standard logging properties are used in this section.
# Furthermore, in order to be affected, a Logger must be created by custom code like LogUtil.makeLogger2.
# Recall: a Logger matches a -NS + pattern if its name is non-empty and there is no other -NS pattern which matches.
#--------------------


#-----set every Logger that is so far unmatched to log ALL messages:
+.level-NS = ALL


#-----set every Logger that is so far unmatched to log to its own (PER LOGGER) file:
+.handlers-NS = java.util.logging.FileHandler


#--------------------------------------------------
# FileHandler properties.
# See the FileHandler javadocs for the complete list and description of all configuration options that may appear here.
#--------------------------------------------------


#java.util.logging.FileHandler.append = <specifies whether the FileHandler should append onto any existing files (defaults to false)>

#java.util.logging.FileHandler.count = <specifies how many output files to cycle through (defaults to 1>

#java.util.logging.FileHandler.encoding = <the name of the character set encoding to use (defaults to the default platform encoding)>

#java.util.logging.FileHandler.filter = <specifies the name of a Filter class to use (defaults to no Filter)>

#java.util.logging.FileHandler.formatter = <specifies the name of a Formatter class to use (defaults to java.util.logging.XMLFormatter)>
java.util.logging.FileHandler.formatter = bb.util.logging.FormatterFull

#java.util.logging.FileHandler.level = <specifies the default level for the Handler (defaults to Level.ALL)>

#java.util.logging.FileHandler.limit = <specifies an approximate maximum amount to write (in bytes) to any one file. If this is zero, then there is no limit. (Defaults to no limit)>

#java.util.logging.FileHandler.pattern = <specifies a pattern for generating the output file name. See below for details. (Defaults to "%h/java%u.log")>


#--------------------------------------------------
# MemoryHandler properties.
# See the MemoryHandler javadocs for the complete list and description of all configuration options that may appear here.
#--------------------------------------------------


#java.util.logging.MemoryHandler.filter = <specifies the name of a Filter class to use (defaults to no Filter).>

#java.util.logging.MemoryHandler.level = <specifies the level for the Handler  (defaults to Level.ALL).>

#java.util.logging.MemoryHandler.push = <defines the pushLevel (defaults to level.SEVERE).>

#java.util.logging.MemoryHandler.size = <defines the buffer size (defaults to 1000).>

#java.util.logging.MemoryHandler.target = <specifies the name of the target Handler class. (no default).>
java.util.logging.MemoryHandler.target = bb.util.logging.HandlerConsole


#--------------------------------------------------
# SocketHandler properties.
# See the SocketHandler javadocs for the complete list and description of all configuration options that may appear here.
#--------------------------------------------------


#java.util.logging.SocketHandler.encoding = <the name of the character set encoding to use (defaults to the default platform encoding).>

#java.util.logging.SocketHandler.filter = <specifies the name of a Filter class to use (defaults to no Filter).>

#java.util.logging.SocketHandler.formatter = <specifies the name of a Formatter class to use (defaults to java.util.logging.XMLFormatter).>

#java.util.logging.SocketHandler.host = <specifies the target host name to connect to (no default).>

#java.util.logging.SocketHandler.level = <specifies the default level for the Handler  (defaults to Level.ALL).>

#java.util.logging.SocketHandler.port = <specifies the target TCP port to use (no default).>


#--------------------------------------------------
# HandlerAudio properties (i.e. a Handler that plays alert sounds on SEVERE or WARNING logs).
# See the HandlerAudio javadocs for the complete list and description of all configuration options that may appear here.
# This Handler has no counterpart to the JDK's builtin Handlers.
#--------------------------------------------------


#bb.util.logging.HandlerAudio.encoding = <the name of the character set encoding to use (defaults to null, which is the default platform encoding, but this is irrelevant, since is never used)>

#bb.util.logging.HandlerAudio.filter = <specifies the name of a Filter class to use (defaults to no Filter)>
bb.util.logging.HandlerAudio.filter = bb.util.logging.FilterMsgSuppress

#bb.util.logging.HandlerAudio.formatter = <specifies the name of a Formatter class to use (defaults to bb.util.logging.FormatterShort, but this is irrelevant, since is never used)>

#bb.util.logging.HandlerAudio.level = <specifies the default level for the Handler (defaults to Level.WARNING)>


#--------------------------------------------------
# HandlerConsole properties (i.e. a Handler that prints serious issues to System.err, but non-serious issues to System.out).
# See the HandlerConsole javadocs for the complete list and description of all configuration options that may appear here.
# This Handler IS A REPLACEMENT FOR java.util.logging.ConsoleHandler.
#--------------------------------------------------


#bb.util.logging.HandlerConsole.encoding = <the name of the character set encoding to use (defaults to null, which is the default platform encoding)>

#bb.util.logging.HandlerConsole.filter = <specifies the name of a Filter class to use (defaults to no Filter)>
bb.util.logging.HandlerConsole.filter = bb.util.logging.FilterMsgSuppress

#bb.util.logging.HandlerConsole.formatter = <specifies the name of a Formatter class to use (defaults to bb.util.logging.FormatterShort)>

#bb.util.logging.HandlerConsole.level = <specifies the default level for the Handler (defaults to Level.INFO)>

#bb.util.logging.HandlerConsole.levelSerious = <specifies the default levelSerious for the Handler (defaults to Level.SEVERE)>


#--------------------------------------------------
# HandlerEmail properties (i.e. a Handler that prints logs to an email account.
# See the HandlerEmail javadocs for the complete list and description of all configuration options that may appear here.
# This Handler has no counterpart to the JDK's builtin Handlers.
#--------------------------------------------------


#bb.util.logging.HandlerEmail.emailConfigFile = <the path to the property file that configures a bb.net.Emailer; THIS VALUE MUST BE DEFINED, SINCE THERE IS NO VALID DEFAULT>
bb.util.logging.HandlerEmail.emailConfigFile = ../../../../../ellipticGroup/KEEP_PRIVATE_SENSITIVE_INFO/gmail.txt

#bb.util.logging.HandlerEmail.emailDestAddr = <the email destination address field used by the bb.net.Emailer; THIS VALUE MUST BE DEFINED, SINCE THERE IS NO VALID DEFAULT>
bb.util.logging.HandlerEmail.emailDestAddr = ellipticgroupinc@gmail.com

#bb.util.logging.HandlerEmail.encoding = <the name of the character set encoding to use (defaults to null, which is the default platform encoding)>

#bb.util.logging.HandlerEmail.filter = <specifies the name of a Filter class to use (defaults to no Filter)>
bb.util.logging.HandlerEmail.filter = bb.util.logging.FilterMsgSuppress

#bb.util.logging.HandlerEmail.formatter = <specifies the name of a Formatter class to use (defaults to bb.util.logging.FormatterShort)>

#bb.util.logging.HandlerEmail.level = <specifies the default level for the Handler (defaults to Level.WARNING)>

#bb.util.logging.HandlerEmail.sizeMax = <the maximum number of LogRecords to store before the oldest ones get dropped (defaults to 1000)>

#bb.util.logging.HandlerEmail.subjectPrefix = <the email subject field's prefix (defaults to "HandlerEmail:")>


#--------------------------------------------------
# HandlerGui properties (i.e. a Handler that prints logs to a GUI window).
# See the HandlerGui javadocs for the complete list and description of all configuration options that may appear here.
# This Handler has no counterpart to the JDK's builtin Handlers.
#--------------------------------------------------


#bb.util.logging.HandlerGui.encoding = <the name of the character set encoding to use (defaults to null, which is the default platform encoding)>

#bb.util.logging.HandlerGui.filter = <specifies the name of a Filter class to use (defaults to no Filter)>
bb.util.logging.HandlerGui.filter = bb.util.logging.FilterMsgSuppress

#bb.util.logging.HandlerGui.formatter = <specifies the name of a Formatter class to use (defaults to bb.util.logging.FormatterFull)>

#bb.util.logging.HandlerGui.level = <specifies the default level for the Handler (defaults to Level.INFO)>

#bb.util.logging.HandlerGui.sizeMax = <the maximum number of LogRecords to store before the oldest ones get dropped (defaults to 1000)>
